// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TerrytLookup.Infrastructure.Repositories.DbContext;

#nullable disable

namespace TerrytLookup.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241116011704_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TerrytLookup.Core.Domain.County", b =>
                {
                    b.Property<int>("VoivodeshipId")
                        .HasColumnType("integer");

                    b.Property<int>("CountyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.HasKey("VoivodeshipId", "CountyId");

                    b.HasIndex("Name");

                    b.HasIndex("VoivodeshipId", "CountyId")
                        .IsUnique();

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Street", b =>
                {
                    b.Property<int>("TownId")
                        .HasColumnType("integer");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.HasKey("TownId", "NameId");

                    b.HasIndex("Name");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Town", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CountyId")
                        .HasColumnType("integer");

                    b.Property<int>("CountyVoivodeshipId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentTownId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentTownId");

                    b.HasIndex("CountyVoivodeshipId", "CountyId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Voivodeship", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Voivodeships");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.County", b =>
                {
                    b.HasOne("TerrytLookup.Core.Domain.Voivodeship", "Voivodeship")
                        .WithMany("Counties")
                        .HasForeignKey("VoivodeshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voivodeship");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Street", b =>
                {
                    b.HasOne("TerrytLookup.Core.Domain.Town", "Town")
                        .WithMany("Streets")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Town", b =>
                {
                    b.HasOne("TerrytLookup.Core.Domain.Town", "ParentTown")
                        .WithMany()
                        .HasForeignKey("ParentTownId");

                    b.HasOne("TerrytLookup.Core.Domain.County", "County")
                        .WithMany("Towns")
                        .HasForeignKey("CountyVoivodeshipId", "CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");

                    b.Navigation("ParentTown");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.County", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Town", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Voivodeship", b =>
                {
                    b.Navigation("Counties");
                });
#pragma warning restore 612, 618
        }
    }
}
